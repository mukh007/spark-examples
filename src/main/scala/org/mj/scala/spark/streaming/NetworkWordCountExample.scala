package org.mj.scala.spark.streaming

import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.dstream.DStream.toPairDStreamFunctions

object NetworkWordCountExample {
  def main(args: Array[String]) {
  	val className = this.getClass().getSimpleName()
    var masterUrl = "local[2]"
    var hostname = "localhost"
    var port = "9999"
    
    if (args.length > 2) {
      System.err.println("Usage: %s <masterUrl> <hostname> <port>".format(className))
      masterUrl = args(0)
      hostname = args(1)
      port = args(2)
    } else {
      System.err.println("Usage: %s <%s> <%s> <%s>".format(className, masterUrl, hostname, port))
    }

    // Create a local StreamingContext with two working thread and batch interval of 1 second.
    // The master requires 2 cores to prevent from a starvation scenario.
    val sparkConf = new SparkConf().setAppName(className).setMaster(masterUrl)
    val ssc = new StreamingContext(sparkConf, Seconds(2))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream(hostname, port.toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()
  }
}
